#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct object_instance_data
{
    mat4 m; // model matrix
    vec4 b; // base color override
    vec4 s; // spec color override
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos 
{
   object_instance_data objects[];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBO 
{
    vec4 data0; // x = time, y = speed, z = rot_speed, w = delay
    vec4 data1; // x = e0, y = e1, z = e2, w = e3
    vec4 data2; // x = ax, y = bx, z = cx, w = dx
    vec4 data3; // x = ay, y = by, z = cy, w = dy
    vec4 data4; // x = az, y = bz, z = cz, w = dz
    uint instance_count;
} ubo;

//
// SIMPLEX NOISE 2D
//

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}


//
// MAIN
//

void main() 
{
    uint i = gl_GlobalInvocationID.x;
    if (i >= ubo.instance_count) 
        return;

    // extract params
    float t              = ubo.data0.x;
    float speed          = ubo.data0.y;
    float rotation_speed = ubo.data0.z;
    float pdt            = ubo.data0.w;

    float e0 = ubo.data1.x;
    float e1 = ubo.data1.y;
    float e2 = ubo.data1.z;
    float e3 = ubo.data1.w;

    float ax = ubo.data2.x;
    float ay = ubo.data3.x;
    float az = ubo.data4.x;
    float bx = ubo.data2.y;
    float by = ubo.data3.y;
    float bz = ubo.data4.y;
    float cx = ubo.data2.z;
    float cy = ubo.data3.z;
    float cz = ubo.data4.z;
    float dx = ubo.data2.w;
    float dy = ubo.data3.w;
    float dz = ubo.data4.w;

    // delay each successive particle, adds some distance.
    float tt = speed * t + i * pdt;
    float rt = rotation_speed * t + i * pdt;

    vec4 J = vec4(1,1,1,1); // jitters per particle, TODO: input

    J.x = snoise(vec2(t, float(i)/float(ubo.instance_count)));
    J.y = snoise(vec2(t, float(i%256)/256.0));
    J.z = snoise(vec2(t, 1.0-float(i%256)/256.0));

    float global_pos_offset_x = e0 * (2.0f * J.x - 1.0f);
    float global_pos_offset_y = e0 * (2.0f * J.y - 1.0f);
    float global_pos_offset_z = e0 * (2.0f * J.z - 1.0f);

    float local_pos_offset_x = e1 * (2.0f * J.x - 1.0f);
    float local_pos_offset_y = e1 * (2.0f * J.y - 1.0f);
    float local_pos_offset_z = e1 * (2.0f * J.z - 1.0f);

    vec4 position = vec4(0,0,0,1);
    position.x = ax * cos(bx*tt) + (cx + local_pos_offset_x) * sin(dx*tt) + global_pos_offset_x;
    position.y = ay * sin(by*tt) + (cy + local_pos_offset_y) * cos(dy*tt) + global_pos_offset_y;
    position.z = az * sin(bz*tt) + (cz + local_pos_offset_z) * cos(dz*tt) + global_pos_offset_z;

    mat4 obj_matrix = mat4(1.0);
    obj_matrix[3] = position;

    objects[i].m = obj_matrix;
    objects[i].b = vec4(1.0, 0.85, 0.57, 1.0);
    objects[i].s = vec4(0.045, 1, 1, 0);
}
